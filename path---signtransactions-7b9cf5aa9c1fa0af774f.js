webpackJsonp([0xe5ffaa23ffcd],{2013:function(e,t){e.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"Attesting Credentials",index:1,type:"content"},fields:{slug:"/attestcredentials"}}},{node:{frontmatter:{title:"Getting Started",index:0,type:"content"},fields:{slug:"/gettingstarted"}}},{node:{frontmatter:{title:"Uport Specs",index:0,type:"content"},fields:{slug:"/readme"}}},{node:{frontmatter:{title:"Requesting Credentials",index:2,type:"content"},fields:{slug:"/requestcredentials"}}},{node:{frontmatter:{title:"Signing Transactions",index:3,type:"content"},fields:{slug:"/signtransactions"}}},{node:{frontmatter:{title:"Clients (apps)",index:3,type:"content"},fields:{slug:"/clients"}}},{node:{frontmatter:{title:"Overview",index:0,type:"content"},fields:{slug:"/overview"}}},{node:{frontmatter:{title:"Platform",index:2,type:"content"},fields:{slug:"/platform"}}},{node:{frontmatter:{title:"Protocols",index:3,type:"content"},fields:{slug:"/protocol"}}},{node:{frontmatter:{title:"Uport JS",index:2,type:"content"},fields:{slug:"/uport-js-docs"}}},{node:{frontmatter:{title:"Uport Connect",index:1,type:"content"},fields:{slug:"/uport-connect-docs"}}}]},navCategories:{edges:[{node:{fields:{slug:"/attestcredentials"},headings:[{value:"Attesting Credentials",depth:1},{value:"If push is enabled",depth:6},{value:"If push is not enabled",depth:6},{value:"Calling the attest method",depth:2},{value:"Setting an expiration date",depth:2},{value:"Attesting multiple credentials",depth:2}],frontmatter:{category:"guides",index:1}}},{node:{fields:{slug:"/gettingstarted"},headings:[{value:"Getting Started",depth:1},{value:"Download the Mobile App",depth:2},{value:"Register your App",depth:2},{value:"Install the Library/SDK",depth:2},{value:"Add your Keys",depth:2}],frontmatter:{category:"guides",index:0}}},{node:{fields:{slug:"/readme"},headings:[{value:"uPort Specs",depth:1},{value:"Identities",depth:2},{value:"Identities created using the uPort Mobile App",depth:3},{value:"Request Flows",depth:2},{value:"More about request flows",depth:3},{value:"Request and Response Transports",depth:2},{value:"Request/Response Transports",depth:3},{value:"Off-chain Messages",depth:2},{value:"More about Off-chain Messages",depth:3},{value:"On-chain Transactions",depth:2},{value:"More about Signing Ethereum transactions",depth:3},{value:"uPort PKI",depth:2},{value:"More about the uPort PKI",depth:3}],frontmatter:{category:"reference",index:0}}},{node:{fields:{slug:"/requestcredentials"},headings:[{value:"Requesting Credentials",depth:1},{value:"Desktop web",depth:3},{value:"Mobile web",depth:3},{value:"Calling the request method",depth:2},{value:"Requesting specific credentials",depth:2},{value:"Enabling Push Notifications",depth:2},{value:"Custom QR Styling (web)",depth:2},{value:"Logging in via Mobile (sdk)",depth:2}],frontmatter:{category:"guides",index:2}}},{node:{fields:{slug:"/signtransactions"},headings:[{value:"Signing Transactions",depth:1},{value:"Supply the contract ABI",depth:2},{value:"Create the contract object",depth:2},{value:"Call a basic method on the contract",depth:2},{value:"Call a tx signing method on the contract",depth:2},{value:"Wait for mining to complete",depth:2}],frontmatter:{category:"guides",index:3}}},{node:{fields:{slug:"/clients"},headings:[{value:"Clients (apps)",depth:1},{value:"uPort Mobile Wallet",depth:2},{value:"uPort App Manager",depth:2},{value:"uPort JS Client",depth:2}],frontmatter:{category:"overview",index:3}}},{node:{fields:{slug:"/overview"},headings:[{value:"OVERVIEW",depth:1}],frontmatter:{category:"overview",index:0}}},{node:{fields:{slug:"/platform"},headings:[{value:"PLATFORM",depth:1},{value:"Ethereum Identity Components",depth:2},{value:"Network Microservices",depth:2},{value:"Libraries",depth:2}],frontmatter:{category:"overview",index:2}}},{node:{fields:{slug:"/protocol"},headings:[{value:"PROTOCOLS",depth:1},{value:"uPort Identity Protocol",depth:2},{value:"uPort Claims Protocol",depth:2}],frontmatter:{category:"overview",index:3}}},{node:{fields:{slug:"/uport-js-docs"},headings:[{value:"Credentials",depth:2},{value:"new Credentials(",depth:3},{value:"credentials.createRequest(",depth:3},{value:"credentials.receive(token, ",depth:3},{value:"credentials.push(token) ⇒ ",depth:3},{value:"credentials.attest(",depth:3},{value:"credentials.lookup(address) ⇒ ",depth:3}],frontmatter:{category:"reference",index:2}}},{node:{fields:{slug:"/uport-connect-docs"},headings:[{value:"Classes",depth:2},{value:"Connect ⇐ ",depth:2},{value:"new Connect(appName, ",depth:3},{value:"connect.getWeb3() ⇒ ",depth:3},{value:"connect.getProvider() ⇒ ",depth:3},{value:"connect.requestCredentials(",depth:3},{value:"connect.requestAddress(",depth:3},{value:"connect.attestCredentials(credential, ",depth:3},{value:"connect.request(request) ⇒ ",depth:3},{value:"connect.contract(abi) ⇒ ",depth:3},{value:"connect.sendTransaction(txobj) ⇒ ",depth:3},{value:"connect.addAppParameters(txobj, callbackUrl) ⇒ ",depth:3},{value:"ConnectCore",depth:2},{value:"new ConnectCore(appName, ",depth:3},{value:"connectCore.getProvider() ⇒ ",depth:3},{value:"connectCore.requestCredentials(",depth:3},{value:"connectCore.requestAddress(",depth:3},{value:"connectCore.attestCredentials(credential, ",depth:3},{value:"connectCore.request(request) ⇒ ",depth:3},{value:"connectCore.contract(abi) ⇒ ",depth:3},{value:"connectCore.sendTransaction(txobj) ⇒ ",depth:3},{value:"connectCore.addAppParameters(txobj, callbackUrl) ⇒ ",depth:3}],frontmatter:{category:"reference",index:1}}},{node:{fields:{slug:"/messages/privatechain"},headings:[{value:"Private Chain Provisioning Message",depth:1},{value:"Attributes",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/index"},headings:[{value:"Off-chain Messages",depth:1},{value:"JSON Web Token",depth:2},{value:"Requirements",depth:3},{value:"JOSE Header",depth:4},{value:"Attributes",depth:4},{value:"Signature Verification",depth:3},{value:"Unsigned Requests",depth:2},{value:"Standard Unsigned Parameters",depth:3},{value:"Message types",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/sharereq"},headings:[{value:"Selective Disclosure Request",depth:1},{value:"Attributes",depth:4},{value:"Unsigned Requests",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/shareresp"},headings:[{value:"Selective Disclosure Response",depth:1},{value:"Attributes",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/verification"},headings:[{value:"Verification",depth:1},{value:"Attributes",depth:2},{value:"Claims Best Practices",depth:2},{value:"Use atomic claims",depth:3},{value:"Bundling multiple claims as one",depth:3},{value:"Claim Taxonomy",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/pki/index"},headings:[{value:"uPort PKI",depth:1},{value:"Purpose",depth:2},{value:"Creating and Verifying a JWT",depth:2},{value:"Identity Document",depth:2},{value:" item",depth:3},{value:" item",depth:3},{value:" item",depth:3},{value:" item",depth:3},{value:"Verifying a signature",depth:2},{value:"Resolving the Public Key for ",depth:3},{value:"Resolving the Public Encryption Key for ",depth:3},{value:"Registering an Identity Document",depth:2},{value:"External Accounts (Key Pairs)",depth:3},{value:"Smart Contract Accounts",depth:3},{value:"uPort Mobile App Created Identities",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/pki/identitydocument"},headings:[{value:"Identity Document",depth:1},{value:"Contents",depth:2},{value:"Parameters",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/index"},headings:[{value:"Uport Request Flows",depth:1},{value:"Specific Application flows",depth:2},{value:"Errors",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/privatechain"},headings:[{value:"Private Chain Provisioning Flow",depth:1},{value:"Requirements",depth:2},{value:"Provisioning Methodology",depth:2},{value:"Endpoint",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/selectivedisclosure"},headings:[{value:"Selective Disclosure Flow",depth:1},{value:"Endpoint",depth:2},{value:"Send Request",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/tx"},headings:[{value:"Ethereum Transaction Flow",depth:1},{value:"Endpoint",depth:2},{value:"Addresses",depth:2},{value:"ERC 67",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/verification"},headings:[{value:"Send Verification Flow",depth:1},{value:"Endpoint",depth:2},{value:"Send Verifications",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/rest-apis/fuel-server"},headings:[{value:"Transaction Fueling Server",depth:1},{value:"API Description",depth:2},{value:"Fuel Token",depth:3},{value:"Fund address",depth:3},{value:"Endpoint",depth:4},{value:"Header",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/rest-apis/relay-server"},headings:[{value:"Meta Transaction Relaying Server",depth:1},{value:"API Description",depth:2},{value:"Fuel Token",depth:3},{value:"MetaSignedTx",depth:3},{value:"Endpoint",depth:4},{value:"Header",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/transports/index"},headings:[{value:"Request/Response Transports",depth:1},{value:"Requests",depth:2},{value:"Open URL",depth:3},{value:"QR Code",depth:3},{value:"Push Notifications",depth:3},{value:"Responses",depth:2},{value:"Redirect callback type",depth:3},{value:"HTTP post callback type",depth:3},{value:"Messaging Server",depth:2},{value:"Preparing callback URL",depth:3},{value:"Listening for Response",depth:3},{value:"Endpoint",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4},{value:"Cleanup",depth:3},{value:"Endpoint",depth:4},{value:"Response",depth:4},{value:"Examples",depth:2},{value:"Mobile Browser Transport",depth:3},{value:"Desktop Browser Serverless Transport",depth:3},{value:"Desktop Browser Server Backed Transport",depth:3},{value:"Push Notification Transport",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/transports/push"},headings:[{value:"Push Notification Transport",depth:1},{value:"Encrypting the request",depth:2},{value:"Proper encoding of the request",depth:3},{value:"Encryption of the request",depth:3},{value:"Encoding the encrypted data",depth:3},{value:"Sending the request",depth:2},{value:"Push notification server",depth:3},{value:"Endpoint",depth:4},{value:"Headers",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}}]},postBySlug:{html:'<style type="text/css">\n\n  li {\n    font-size: 16px;\n  }\n\n  .overview-list {\n      margin-left: 0;\n      padding-right: 0;\n      list-style-type: none;\n  }\n\n  .overview-list ol {\n      padding-bottom: 20px;\n  }\n\n  .overview-list li {\n      counter-increment: list-counter;\n      list-style: inside;\n  }\n\n  .overview-list li::before {\n      content: counter(list-counter);\n      /* margin-right: 5px; */\n      /* font-size: 80%; */\n      background-color: #7958d8;\n      color: #f9f9fa;\n      font-weight: bold;\n      font-size: .9em;\n      padding: 2px 5px;\n      border-radius: 15px;\n      display: inline-block;\n      width: 1em;\n      margin-left: -1.8em;\n      margin-top: .8em;\n      margin-right: .3em;\n      text-align: center;\n      direction: rtl;\n  }\n\n  table {\n    table-layout: fixed;\n    width: 100%;\n  }\n\n  td {\n    align: left;\n  }\n\n  .overview-list p {\n    font-size: .9em;\n  }\n\n  img[alt="small-diag"] {\n    padding: 20px;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 550px;\n    display: block;\n  }\n\n  img[alt="diag"] {\n    padding: 20px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    max-width: 600px;\n  }\n\n  hr {\n    border: 0;\n    height: 0;\n    color: rgba(230, 224, 248);\n    background-color: rgba(230, 224, 248);\n    border-color: rgba(230, 224, 248);\n    border-top: 1px solid;\n  }\n\n</style>\n<h1 id="signing-transactions"><a href="#signing-transactions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Signing Transactions</h1>\n<p><img src="/diag2-97b1c43ad988d091ea936a05aafdc5e2.svg" alt="diag"></p>\n<div class="overview-list" markdown=1>\n<ol>\n<li>Browser displays QR code with randomly generated sessionID in a URI</li>\n<li>Browser starts polling chasqui using the sessionId to check if Mobile has posted the transaction hash.</li>\n<li>If mobile-to-mobile, this follows the mobile interaction pattern (using URIs &#x26; JWTs instead of Chasqui shown in diagram A)</li>\n<li>Mobile scans QR code, displays card asking the user to sign a transaction. A system dialog (Touch ID / Face ID / Device PIN) is shown in order to access the device key.</li>\n<li>If user consents: Mobile fetches the transaction data from the URL, as well as the sessionId, then signs the transaction data with the device key.</li>\n<li>Device sends the signed tx to sensui.uport.me. Sensui wraps the signed tx in its own transaction and sends the wrapped tx to a relay contract via rinkeby.infura.io.</li>\n<li>Infura sends the tx hash back to Sensui, which passes it to the mobile app. Mobile posts the transaction hash to chasqui using the sessionId.</li>\n<li>Browser grabs the transaction hash from Chasqui, removes QR code from UI, and updates UI accordingly</li>\n<li>The relay contract confirms the original signed tx hasn’t been tampered with, then forwards the entire wrapped tx through the controller contract to the proxy.</li>\n<li>Proxy contract forwards the tx to its intended destination, gas paid for by Sensui.</li>\n</ol>\n</div>\n<p>uPort comes pre-baked with a web3 instance that calls to <a href="https://github.com/ethereumjs/testrpc">Infura</a>, our p2p swarm of nodes we have built so you don\'t need to stand up your own. All you need to do is grab our <code>web3</code> object and instantiate a smart contract javascript object with a <strong>provided ABI</strong>.</p>\n<h2 id="supply-the-contract-abi"><a href="#supply-the-contract-abi" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Supply the contract ABI</h2>\n<p>An ABI (Application BINARY Interface) can be generated by compiling your smart contract with the <a href="https://ethereum.github.io/browser-solidity/">Remix</a> Web IDE. Its on the "Contracts" tab down where it says <code>interface</code>. You can deploy this contract to the chain with the <strong>Web3</strong> deploy code just below that in your local Ethereum node console or with our build &#x26; deploy tool called <a href="http://truffleframework.com/">Truffle</a>.</p>\n<h2 id="create-the-contract-object"><a href="#create-the-contract-object" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Create the contract object</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyContractSetup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> MyContractABI <span class="token operator">=</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">contract</span><span class="token punctuation">(</span>PROVIDED_CONTRACT_ABI<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> MyContractObj <span class="token operator">=</span> MyContractABI<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>DEPLOYED_CONTRACT_ADDRESS_LOCATION<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> MyContractObj\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> MyContract <span class="token operator">=</span> <span class="token function">MyContractSetup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2 id="call-a-basic-method-on-the-contract"><a href="#call-a-basic-method-on-the-contract" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Call a basic method on the contract</h2>\n<p>In a typical application, upon load, there is data usually being requested by a server to get the current state of the user\'s data. We must do the same here, but rather than reading a SQL database, we are instead reading the blockchain.</p>\n<p>At ConsenSys we use our Web 3.0 infrastructure stack called <a href="https://github.com/uport-project/demo/blob/master/infura.io">Infura</a> to make the amount of possible calls scalable. You could otherwise have an Ethereum node local on your machine with a downloaded copy of the blockchain you could query. Calls can be simulated without having a copy of the blockchain though using a local <a href="https://github.com/ethereumjs/testrpc">TestRPC</a> node, but thats out of scope for this guide.</p>\n<p>It is important to note that Ethereum has many networks, such as "intranet" style private networks, tests networks, and the main network everyone knows. In order to call a contract with our ID to look up some data, we must match the network that the identity is on and the the network the contract is on. To do this we will grab the uport address and break it out using the MNID or "Multi Netowork Identity" module supplied with uPort. Remember our <code>requestCrednetials</code> callback that gave us a Schema.org/Persona JSON payload? Lets go dig into that.</p>\n<p>Lesson learned: uPort has 1 master address that is a hash of MANY addresses for all the different networks it exists on.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>userProfile<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> decodedId <span class="token operator">=</span> MNID<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>userProfile<span class="token punctuation">.</span>address<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> specificNetworkAddress <span class="token operator">=</span> decodedId<span class="token punctuation">.</span>address\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>We could then supply <code>specificNetworkAddress</code> to where <code>METHOD_INPUT_DATA</code> is below.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Basic call to get some return data, no transaction signing</span>\nMyContract<span class="token punctuation">.</span>someMethod<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>METHOD_INPUT_DATA<span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> error <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2 id="call-a-tx-signing-method-on-the-contract"><a href="#call-a-tx-signing-method-on-the-contract" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Call a tx signing method on the contract</h2>\n<p>Calling a method on a smart contract is essentially no different than that of a javascript function, except that solidity contracts cannot handle JSON objects, only strings and numbers.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Transaction signing (that will fire a QR to scan or card in the mobile app)</span>\nMyContract<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span>METHOD_INPUT_DATA<span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> txHash<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> error <span class="token punctuation">}</span>\n    <span class="token function">waitForMined</span><span class="token punctuation">(</span>txHash<span class="token punctuation">,</span> <span class="token punctuation">{</span> blockNumber<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// see next area</span>\n    <span class="token keyword">function</span> <span class="token function">pendingCB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Signal to the user you\'re still waiting</span>\n      <span class="token comment">// for a block confirmation</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span> <span class="token function">successCB</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Great Success!</span>\n      <span class="token comment">// Likely you\'ll call some eventPublisherMethod(txHash, data)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2 id="wait-for-mining-to-complete"><a href="#wait-for-mining-to-complete" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Wait for mining to complete</h2>\n<p>When a transaction is signed and submitted to a smart contract, the Ethereum network takes time to mine (confirm) the transaction (typically 15 seconds). During this time we will need to poll the Web3 node (aka provider and in our case, its Infura), to see if its been mined. We will keep checking it with a function called <code>waitForMined</code> and have a pending callback and a success callback to manage state.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Callback handler for whether it was mined or not</span>\n<span class="token keyword">const</span> <span class="token function-variable function">waitForMined</span> <span class="token operator">=</span> <span class="token punctuation">(</span>txHash<span class="token punctuation">,</span> response<span class="token punctuation">,</span> pendingCB<span class="token punctuation">,</span> successCB<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>blockNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">successCB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">pendingCB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token function">pollingLoop</span><span class="token punctuation">(</span>txHash<span class="token punctuation">,</span> response<span class="token punctuation">,</span> pendingCB<span class="token punctuation">,</span> successCB<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Recursive polling to do continuous checks for when the transaction was mined</span>\n<span class="token keyword">const</span> <span class="token function-variable function">pollingLoop</span> <span class="token operator">=</span> <span class="token punctuation">(</span>txHash<span class="token punctuation">,</span> response<span class="token punctuation">,</span> pendingCB<span class="token punctuation">,</span> successCB<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>txHash<span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> error <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          response <span class="token operator">=</span> <span class="token punctuation">{</span> blockNumber<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token comment">// Some ETH nodes do not return pending tx</span>\n        <span class="token function">waitForMined</span><span class="token punctuation">(</span>txHash<span class="token punctuation">,</span> response<span class="token punctuation">,</span> pendingCB<span class="token punctuation">,</span> successCB<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// check again in one sec.</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>',timeToRead:4,excerpt:"Signing Transactions Browser displays QR code with randomly generated sessionID in a URI Browser starts polling chasqui using the sessionId…",headings:[{value:"Signing Transactions",depth:1},{value:"Supply the contract ABI",depth:2},{value:"Create the contract object",depth:2},{value:"Call a basic method on the contract",depth:2},{value:"Call a tx signing method on the contract",depth:2},{value:"Wait for mining to complete",depth:2}],frontmatter:{title:"Signing Transactions",category:"guides",type:"content"},fields:{slug:"/signtransactions"}},postByCategory:{totalCount:11,edges:[{node:{fields:{slug:"/attestcredentials"},headings:[{value:"Attesting Credentials",depth:1},{value:"If push is enabled",depth:6},{value:"If push is not enabled",
depth:6},{value:"Calling the attest method",depth:2},{value:"Setting an expiration date",depth:2},{value:"Attesting multiple credentials",depth:2}],excerpt:"Attesting Credentials Browser displays a QR code (if desktop) or loads a URI that opens the uPort app (if mobile) to initiate the login…",timeToRead:2,frontmatter:{title:"Attesting Credentials",category:"guides",index:1,type:"content"}}},{node:{fields:{slug:"/gettingstarted"},headings:[{value:"Getting Started",depth:1},{value:"Download the Mobile App",depth:2},{value:"Register your App",depth:2},{value:"Install the Library/SDK",depth:2},{value:"Add your Keys",depth:2}],excerpt:"Getting Started Welcome to the uPort usage guide! Here we will walk you through all the necessary steps to get up and running with your…",timeToRead:3,frontmatter:{title:"Getting Started",category:"guides",index:0,type:"content"}}},{node:{fields:{slug:"/readme"},headings:[{value:"uPort Specs",depth:1},{value:"Identities",depth:2},{value:"Identities created using the uPort Mobile App",depth:3},{value:"Request Flows",depth:2},{value:"More about request flows",depth:3},{value:"Request and Response Transports",depth:2},{value:"Request/Response Transports",depth:3},{value:"Off-chain Messages",depth:2},{value:"More about Off-chain Messages",depth:3},{value:"On-chain Transactions",depth:2},{value:"More about Signing Ethereum transactions",depth:3},{value:"uPort PKI",depth:2},{value:"More about the uPort PKI",depth:3}],excerpt:"uPort Specs uPort is a platform for user centric identity and communication. The platform currently consists of our mobile app, Ethereum…",timeToRead:2,frontmatter:{title:"Uport Specs",category:"reference",index:0,type:"content"}}},{node:{fields:{slug:"/requestcredentials"},headings:[{value:"Requesting Credentials",depth:1},{value:"Desktop web",depth:3},{value:"Mobile web",depth:3},{value:"Calling the request method",depth:2},{value:"Requesting specific credentials",depth:2},{value:"Enabling Push Notifications",depth:2},{value:"Custom QR Styling (web)",depth:2},{value:"Logging in via Mobile (sdk)",depth:2}],excerpt:"Requesting Credentials Desktop web Browser displays QR code with URI Browser starts polling chasqui using the sessionId to check if Mobile…",timeToRead:4,frontmatter:{title:"Requesting Credentials",category:"guides",index:2,type:"content"}}},{node:{fields:{slug:"/signtransactions"},headings:[{value:"Signing Transactions",depth:1},{value:"Supply the contract ABI",depth:2},{value:"Create the contract object",depth:2},{value:"Call a basic method on the contract",depth:2},{value:"Call a tx signing method on the contract",depth:2},{value:"Wait for mining to complete",depth:2}],excerpt:"Signing Transactions Browser displays QR code with randomly generated sessionID in a URI Browser starts polling chasqui using the sessionId…",timeToRead:4,frontmatter:{title:"Signing Transactions",category:"guides",index:3,type:"content"}}},{node:{fields:{slug:"/clients"},headings:[{value:"Clients (apps)",depth:1},{value:"uPort Mobile Wallet",depth:2},{value:"uPort App Manager",depth:2},{value:"uPort JS Client",depth:2}],excerpt:"Clients (apps) Allow users, developers, and applications to interact with the uPort platform. uPort Mobile Wallet : Secure mobile self…",timeToRead:1,frontmatter:{title:"Clients (apps)",category:"overview",index:3,type:"content"}}},{node:{fields:{slug:"/overview"},headings:[{value:"OVERVIEW",depth:1}],excerpt:"OVERVIEW uPort is an interoperable identity network for a secure, private, decentralized web. uPort provides open protocols for…",timeToRead:1,frontmatter:{title:"Overview",category:"overview",index:0,type:"content"}}},{node:{fields:{slug:"/platform"},headings:[{value:"PLATFORM",depth:1},{value:"Ethereum Identity Components",depth:2},{value:"Network Microservices",depth:2},{value:"Libraries",depth:2}],excerpt:"PLATFORM The uPort Platform is our implementation of the uPort Protocol designed to make decentralized identities on Ethereum easy to create…",timeToRead:3,frontmatter:{title:"Platform",category:"overview",index:2,type:"content"}}},{node:{fields:{slug:"/protocol"},headings:[{value:"PROTOCOLS",depth:1},{value:"uPort Identity Protocol",depth:2},{value:"uPort Claims Protocol",depth:2}],excerpt:"PROTOCOLS uPort consists of identity and messaging protocols that together form an interoperable identity layer for the decentralized web…",timeToRead:1,frontmatter:{title:"Protocols",category:"overview",index:3,type:"content"}}},{node:{fields:{slug:"/uport-js-docs"},headings:[{value:"Credentials",depth:2},{value:"new Credentials(",depth:3},{value:"credentials.createRequest(",depth:3},{value:"credentials.receive(token, ",depth:3},{value:"credentials.push(token) ⇒ ",depth:3},{value:"credentials.attest(",depth:3},{value:"credentials.lookup(address) ⇒ ",depth:3}],excerpt:"Credentials The Credentials class allows you to easily create the signed payloads used in uPort inlcuding\n   credentials and signed mobile…",timeToRead:5,frontmatter:{title:"Uport JS",category:"reference",index:2,type:"content"}}},{node:{fields:{slug:"/uport-connect-docs"},headings:[{value:"Classes",depth:2},{value:"Connect ⇐ ",depth:2},{value:"new Connect(appName, ",depth:3},{value:"connect.getWeb3() ⇒ ",depth:3},{value:"connect.getProvider() ⇒ ",depth:3},{value:"connect.requestCredentials(",depth:3},{value:"connect.requestAddress(",depth:3},{value:"connect.attestCredentials(credential, ",depth:3},{value:"connect.request(request) ⇒ ",depth:3},{value:"connect.contract(abi) ⇒ ",depth:3},{value:"connect.sendTransaction(txobj) ⇒ ",depth:3},{value:"connect.addAppParameters(txobj, callbackUrl) ⇒ ",depth:3},{value:"ConnectCore",depth:2},{value:"new ConnectCore(appName, ",depth:3},{value:"connectCore.getProvider() ⇒ ",depth:3},{value:"connectCore.requestCredentials(",depth:3},{value:"connectCore.requestAddress(",depth:3},{value:"connectCore.attestCredentials(credential, ",depth:3},{value:"connectCore.request(request) ⇒ ",depth:3},{value:"connectCore.contract(abi) ⇒ ",depth:3},{value:"connectCore.sendTransaction(txobj) ⇒ ",depth:3},{value:"connectCore.addAppParameters(txobj, callbackUrl) ⇒ ",depth:3}],excerpt:"Classes Connect ⇐  ConnectCore Primary object for frontend interactions with uPort. Bundles all neccesary functionality. Kind : global class…",timeToRead:19,frontmatter:{title:"Uport Connect",category:"reference",index:1,type:"content"}}}]}},pathContext:{slug:"/signtransactions"}}}});
//# sourceMappingURL=path---signtransactions-7b9cf5aa9c1fa0af774f.js.map