webpackJsonp([0xbca0ebb268d3],{2019:function(e,t){e.exports={data:{allPostTitles:{edges:[{node:{frontmatter:{title:"Attesting Credentials",index:1,type:"content"},fields:{slug:"/attestcredentials"}}},{node:{frontmatter:{title:"Getting Started",index:0,type:"content"},fields:{slug:"/gettingstarted"}}},{node:{frontmatter:{title:"Uport Specs",index:0,type:"content"},fields:{slug:"/readme"}}},{node:{frontmatter:{title:"Requesting Credentials",index:1,type:"content"},fields:{slug:"/requestcredentials"}}},{node:{frontmatter:{title:"Signing Transactions",index:3,type:"content"},fields:{slug:"/signtransactions"}}},{node:{frontmatter:{title:"Clients (apps)",index:3,type:"content"},fields:{slug:"/clients"}}},{node:{frontmatter:{title:"Overview",index:0,type:"content"},fields:{slug:"/overview"}}},{node:{frontmatter:{title:"Platform",index:2,type:"content"},fields:{slug:"/platform"}}},{node:{frontmatter:{title:"Protocols",index:3,type:"content"},fields:{slug:"/protocol"}}},{node:{frontmatter:{title:"Specs",index:3,type:"content"},fields:{slug:"/specs"}}},{node:{frontmatter:{title:"Uport Connect",index:1,type:"content"},fields:{slug:"/uport-connect-docs"}}},{node:{frontmatter:{title:"Uport JS",index:2,type:"content"},fields:{slug:"/uport-js-docs"}}}]},navCategories:{edges:[{node:{fields:{slug:"/attestcredentials"},headings:[{value:"Attesting Credentials",depth:1},{value:"Calling the attest method",depth:2},{value:"Setting an expiration date",depth:2},{value:"Attesting multiple credentials",depth:2}],frontmatter:{category:"guides",index:1}}},{node:{fields:{slug:"/gettingstarted"},headings:[{value:"Getting Started",depth:1},{value:"Download the Mobile App",depth:2},{value:"Register your App",depth:2},{value:"Install the Library/SDK",depth:2},{value:"Add your Keys",depth:2}],frontmatter:{category:"guides",index:0}}},{node:{fields:{slug:"/readme"},headings:[{value:"uPort Specs",depth:1},{value:"Identities",depth:2},{value:"Identities created using the uPort Mobile App",depth:3},{value:"Request Flows",depth:2},{value:"More about request flows",depth:3},{value:"Request and Response Transports",depth:2},{value:"Request/Response Transports",depth:3},{value:"Off-chain Messages",depth:2},{value:"More about Off-chain Messages",depth:3},{value:"On-chain Transactions",depth:2},{value:"More about Signing Ethereum transactions",depth:3},{value:"uPort PKI",depth:2},{value:"More about the uPort PKI",depth:3}],frontmatter:{category:"reference",index:0}}},{node:{fields:{slug:"/requestcredentials"},headings:[{value:"Requesting Credentials",depth:1},{value:"Calling the request method",depth:2},{value:"Requesting specific credentials",depth:2},{value:"Enabling Push Notifications",depth:2},{value:"Custom QR Styling (web)",depth:2},{value:"Logging in via Mobile (sdk)",depth:2}],frontmatter:{category:"guides",index:1}}},{node:{fields:{slug:"/signtransactions"},headings:[{value:"Signing Transactions",depth:1},{value:"Supply the contract ABI",depth:2},{value:"Create the contract object",depth:2},{value:"Call a basic method on the contract",depth:2},{value:"Call a tx signing method on the contract",depth:2},{value:"Wait for mining to complete",depth:2}],frontmatter:{category:"guides",index:3}}},{node:{fields:{slug:"/clients"},headings:[{value:"Clients (apps)",depth:1},{value:"uPort Mobile Wallet",depth:2},{value:"uPort App Manager",depth:2},{value:"uPort JS Client",depth:2}],frontmatter:{category:"guides",index:3}}},{node:{fields:{slug:"/overview"},headings:[{value:"OVERVIEW",depth:1}],frontmatter:{category:"overview",index:0}}},{node:{fields:{slug:"/platform"},headings:[{value:"PLATFORM",depth:1},{value:"Ethereum Identity Components",depth:2},{value:"Network Microservices",depth:2},{value:"Libraries",depth:2}],frontmatter:{category:"overview",index:2}}},{node:{fields:{slug:"/protocol"},headings:[{value:"PROTOCOLS",depth:1},{value:"uPort Identity Protocol",depth:2},{value:"uPort Claims Protocol",depth:2}],frontmatter:{category:"overview",index:3}}},{node:{fields:{slug:"/specs"},headings:[{value:"SPECS",depth:1},{value:"Flows",depth:2},{value:"Messages",depth:2},{value:"PKI",depth:2},{value:"Rest APIs",depth:2},{value:"Transports",depth:2}],frontmatter:{category:"overview",index:3}}},{node:{fields:{slug:"/uport-connect-docs"},headings:[{value:"Classes",depth:2},{value:"Connect ⇐ ",depth:2},{value:"new Connect(appName, ",depth:3},{value:"connect.getWeb3() ⇒ ",depth:3},{value:"connect.getProvider() ⇒ ",depth:3},{value:"connect.requestCredentials(",depth:3},{value:"connect.requestAddress(",depth:3},{value:"connect.attestCredentials(credential, ",depth:3},{value:"connect.request(request) ⇒ ",depth:3},{value:"connect.contract(abi) ⇒ ",depth:3},{value:"connect.sendTransaction(txobj) ⇒ ",depth:3},{value:"connect.addAppParameters(txobj, callbackUrl) ⇒ ",depth:3},{value:"ConnectCore",depth:2},{value:"new ConnectCore(appName, ",depth:3},{value:"connectCore.getProvider() ⇒ ",depth:3},{value:"connectCore.requestCredentials(",depth:3},{value:"connectCore.requestAddress(",depth:3},{value:"connectCore.attestCredentials(credential, ",depth:3},{value:"connectCore.request(request) ⇒ ",depth:3},{value:"connectCore.contract(abi) ⇒ ",depth:3},{value:"connectCore.sendTransaction(txobj) ⇒ ",depth:3},{value:"connectCore.addAppParameters(txobj, callbackUrl) ⇒ ",depth:3}],frontmatter:{category:"reference",index:1}}},{node:{fields:{slug:"/uport-js-docs"},headings:[{value:"Credentials",depth:2},{value:"new Credentials(",depth:3},{value:"credentials.createRequest(",depth:3},{value:"credentials.receive(token, ",depth:3},{value:"credentials.push(token) ⇒ ",depth:3},{value:"credentials.attest(",depth:3},{value:"credentials.lookup(address) ⇒ ",depth:3}],frontmatter:{category:"reference",index:2}}},{node:{fields:{slug:"/messages/index"},headings:[{value:"Off-chain Messages",depth:1},{value:"JSON Web Token",depth:2},{value:"Requirements",depth:3},{value:"JOSE Header",depth:4},{value:"Attributes",depth:4},{value:"Signature Verification",depth:3},{value:"Unsigned Requests",depth:2},{value:"Standard Unsigned Parameters",depth:3},{value:"Message types",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/privatechain"},headings:[{value:"Private Chain Provisioning Message",depth:1},{value:"Attributes",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/shareresp"},headings:[{value:"Selective Disclosure Response",depth:1},{value:"Attributes",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/sharereq"},headings:[{value:"Selective Disclosure Request",depth:1},{value:"Attributes",depth:4},{value:"Unsigned Requests",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/messages/verification"},headings:[{value:"Verification",depth:1},{value:"Attributes",depth:2},{value:"Claims Best Practices",depth:2},{value:"Use atomic claims",depth:3},{value:"Bundling multiple claims as one",depth:3},{value:"Claim Taxonomy",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/pki/index"},headings:[{value:"uPort PKI",depth:1},{value:"Purpose",depth:2},{value:"Creating and Verifying a JWT",depth:2},{value:"Identity Document",depth:2},{value:" item",depth:3},{value:" item",depth:3},{value:" item",depth:3},{value:" item",depth:3},{value:"Verifying a signature",depth:2},{value:"Resolving the Public Key for ",depth:3},{value:"Resolving the Public Encryption Key for ",depth:3},{value:"Registering an Identity Document",depth:2},{value:"External Accounts (Key Pairs)",depth:3},{value:"Smart Contract Accounts",depth:3},{value:"uPort Mobile App Created Identities",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/index"},headings:[{value:"Uport Request Flows",depth:1},{value:"Specific Application flows",depth:2},{value:"Errors",depth:2}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/privatechain"},headings:[{value:"Private Chain Provisioning Flow",depth:1},{value:"Requirements",depth:2},{value:"Provisioning Methodology",depth:2},{value:"Endpoint",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/selectivedisclosure"},headings:[{value:"Selective Disclosure Flow",depth:1},{value:"Endpoint",depth:2},{value:"Send Request",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/pki/identitydocument"},headings:[{value:"Identity Document",depth:1},{value:"Contents",depth:2},{value:"Parameters",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/tx"},headings:[{value:"Ethereum Transaction Flow",depth:1},{value:"Endpoint",depth:2},{value:"Addresses",depth:2},{value:"ERC 67",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3},{value:"Errors",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/flows/verification"},headings:[{value:"Send Verification Flow",depth:1},{value:"Endpoint",depth:2},{value:"Send Verifications",depth:2},{value:"Client Callback",depth:2},{value:"Successful Response",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/rest-apis/fuel-server"},headings:[{value:"Transaction Fueling Server",depth:1},{value:"API Description",depth:2},{value:"Fuel Token",depth:3},{value:"Fund address",depth:3},{value:"Endpoint",depth:4},{value:"Header",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/rest-apis/relay-server"},headings:[{value:"Meta Transaction Relaying Server",depth:1},{value:"API Description",depth:2},{value:"Fuel Token",depth:3},{value:"MetaSignedTx",depth:3},{value:"Endpoint",depth:4},{value:"Header",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/transports/index"},headings:[{value:"Request/Response Transports",depth:1},{value:"Requests",depth:2},{value:"Open URL",depth:3},{value:"QR Code",depth:3},{value:"Push Notifications",depth:3},{value:"Responses",depth:2},{value:"Redirect callback type",depth:3},{value:"HTTP post callback type",depth:3},{value:"Messaging Server",depth:2},{value:"Preparing callback URL",depth:3},{value:"Listening for Response",depth:3},{value:"Endpoint",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4},{value:"Cleanup",depth:3},{value:"Endpoint",depth:4},{value:"Response",depth:4},{value:"Examples",depth:2},{value:"Mobile Browser Transport",depth:3},{value:"Desktop Browser Serverless Transport",depth:3},{value:"Desktop Browser Server Backed Transport",depth:3},{value:"Push Notification Transport",depth:3}],frontmatter:{category:"reference",index:null}}},{node:{fields:{slug:"/transports/push"},headings:[{value:"Push Notification Transport",depth:1},{value:"Encrypting the request",depth:2},{value:"Proper encoding of the request",depth:3},{value:"Encryption of the request",depth:3},{value:"Encoding the encrypted data",depth:3},{value:"Sending the request",depth:2},{value:"Push notification server",depth:3},{value:"Endpoint",depth:4},{value:"Headers",depth:4},{value:"Body",depth:4},{value:"Response",depth:4},{value:"Response data",depth:4}],frontmatter:{category:"reference",index:null}}}]},postBySlug:{html:'<p><a name="Credentials"></a></p>\n<h2 id="credentials"><a href="#credentials" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Credentials</h2>\n<p>The Credentials class allows you to easily create the signed payloads used in uPort inlcuding\ncredentials and signed mobile app requests (ex. selective disclosure requests\nfor private data). It also provides signature verification over signed payloads and\nallows you to send push notifications to users.</p>\n<p><strong>Kind</strong>: global class</p>\n<ul>\n<li>\n<p><a href="#Credentials">Credentials</a></p>\n<ul>\n<li><a href="#new_Credentials_new">new Credentials([settings])</a></li>\n<li><a href="#Credentials+createRequest">.createRequest([params])</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n<li><a href="#Credentials+receive">.receive(token, [callbackUrl])</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n<li><a href="#Credentials+push">.push(token)</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n<li><a href="#Credentials+attest">.attest([credential])</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n<li><a href="#Credentials+lookup">.lookup(address)</a> ⇒ <code>Promise.&#x3C;Object, Error></code></li>\n</ul>\n</li>\n</ul>\n<p><a name="new_Credentials_new"></a></p>\n<h3 id="new-credentialssettings"><a href="#new-credentialssettings" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>new Credentials([settings])</h3>\n<p>Instantiates a new uPort Credentials object</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[\nsettings\n]</td>\n<td><code>\nObject\n</code></td>\n<td>setttings</td>\n</tr>\n<tr>\n<td>settings.networks</td>\n<td><code>\nObject\n</code></td>\n<td>networks config object, ie. {  \'0x94365e3b\': { rpcUrl: \'\n<a href="https://private.chain/rpc&#x27;">https://private.chain/rpc\'</a>\n, address: \'0x0101.... }}</td>\n</tr>\n<tr>\n<td>settings.registry</td>\n<td><code>\nUportLite\n</code></td>\n<td>a registry object from UportLite</td>\n</tr>\n<tr>\n<td>settings.signer</td>\n<td><code>\nSimpleSigner\n</code></td>\n<td>a signer object, see SimpleSigner.js</td>\n</tr>\n<tr>\n<td>settings.address</td>\n<td><code>\nAddress\n</code></td>\n<td>your uPort address (may be the address of your application\'s uPort identity)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Credentials<span class="token punctuation">,</span> SimpleSigner <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'uport\'</span>\n<span class="token keyword">const</span> networks <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">\'0x94365e3b\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> rpcUrl<span class="token punctuation">:</span> <span class="token string">\'https://private.chain/rpc\'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> \'<span class="token number">0x0101</span><span class="token operator">...</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> setttings <span class="token operator">=</span> <span class="token punctuation">{</span> networks<span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">\'5A8bRWU3F7j3REx3vkJ...\'</span><span class="token punctuation">,</span> signer<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">SimpleSigner</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PRIVATE_KEY<span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Credentials</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p><strong>Example</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Credentials <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'uport\'</span>\n<span class="token keyword">const</span> credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Credentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p><a name="Credentials+createRequest"></a></p>\n<h3 id="credentialscreaterequestparams-⇒-codepromiseobject-errorcode"><a href="#credentialscreaterequestparams-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.createRequest([params]) ⇒ <code>Promise.&#x3C;Object, Error></code></h3>\n<p>Creates a signed request token (JWT) given a request params object.</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a signed JSON Web Token or rejects with an error</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[\nparams\n]</td>\n<td><code>\nObject\n</code></td>\n<td><code>\n{}\n</code></td>\n<td>request params object</td>\n</tr>\n<tr>\n<td>params.requested</td>\n<td><code>\nArray\n</code></td>\n<td></td>\n<td>an array of attributes for which you are requesting credentials to be shared for</td>\n</tr>\n<tr>\n<td>params.callbackUrl</td>\n<td><code>\nString\n</code></td>\n<td></td>\n<td>the url which you want to receive the response of this request</td>\n</tr>\n<tr>\n<td>params.notifications</td>\n<td><code>\nBoolean\n</code></td>\n<td></td>\n<td>boolean if you want to request the ability to send push notifications</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> req <span class="token operator">=</span> <span class="token punctuation">{</span> requested<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token string">\'country\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n               callbackUrl<span class="token punctuation">:</span> <span class="token string">\'https://myserver.com\'</span><span class="token punctuation">,</span>\n               notifications<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n credentials<span class="token punctuation">.</span><span class="token function">createRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>jwt <span class="token operator">=></span> <span class="token punctuation">{</span>\n     <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\n requested<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'name\'</span><span class="token punctuation">,</span><span class="token string">\'phone\'</span><span class="token punctuation">,</span><span class="token string">\'identity_no\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    callbackUrl<span class="token punctuation">:</span> <span class="token string">\'https://....\'</span> <span class="token comment">// URL to send the response of the request to</span>\n    notifications<span class="token punctuation">:</span> <span class="token boolean">true</span>\n</code></pre>\n      </div>\n<p><a name="Credentials+receive"></a></p>\n<h3 id="credentialsreceivetoken-callbackurl-⇒-codepromiseobject-errorcode"><a href="#credentialsreceivetoken-callbackurl-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.receive(token, [callbackUrl]) ⇒ <code>Promise.&#x3C;Object, Error></code></h3>\n<p>Receive signed response token from mobile app. Verifies and parses the given response token.</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a parsed response or rejects with an error.</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>token</td>\n<td><code>\nString\n</code></td>\n<td></td>\n<td>a response token</td>\n</tr>\n<tr>\n<td>[\ncallbackUrl\n]</td>\n<td><code>\nString\n</code></td>\n<td><code>\n</code></td>\n<td>callbackUrl</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> resToken <span class="token operator">=</span> <span class="token string">\'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....\'</span>\n credentials<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>resToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=></span> <span class="token punctuation">{</span>\n     <span class="token keyword">const</span> credentials <span class="token operator">=</span> res<span class="token punctuation">.</span>verified\n         <span class="token keyword">const</span> name <span class="token operator">=</span>  res<span class="token punctuation">.</span>name\n     <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p><a name="Credentials+push"></a></p>\n<h3 id="credentialspushtoken-⇒-codepromiseobject-errorcode"><a href="#credentialspushtoken-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.push(token) ⇒ <code>Promise.&#x3C;Object, Error></code></h3>\n<p>Send a push notification to a user, consumes a token which allows you to send push notifications\nand a url/uri request you want to send to the user.</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with successful status or rejects with an error</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>token</td>\n<td><code>\nString\n</code></td>\n<td>a push notification token (get a pn token by requesting push permissions in a request)</td>\n</tr>\n</tbody>\n</table>\n<p><a name="Credentials+attest"></a></p>\n<h3 id="credentialsattestcredential-⇒-codepromiseobject-errorcode"><a href="#credentialsattestcredential-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.attest([credential]) ⇒ <code>Promise.&#x3C;Object, Error></code></h3>\n<p>Create a credential (a signed JSON Web Token)</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with a credential (JWT) or rejects with an error</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[\ncredential\n]</td>\n<td><code>\nObject\n</code></td>\n<td>a unsigned credential object</td>\n</tr>\n<tr>\n<td>credential.sub</td>\n<td><code>\nString\n</code></td>\n<td>subject of credential (a uPort address)</td>\n</tr>\n<tr>\n<td>credential.claim</td>\n<td><code>\nString\n</code></td>\n<td>claim about subject single key value or key mapping to object with multiple values (ie { address: {street: ..., zip: ..., country: ...}})</td>\n</tr>\n<tr>\n<td>credential.exp</td>\n<td><code>\nString\n</code></td>\n<td>time at which this claim expires and is no longer valid</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">credentials<span class="token punctuation">.</span><span class="token function">attest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  sub<span class="token punctuation">:</span> <span class="token string">\'5A8bRWU3F7j3REx3vkJ...\'</span><span class="token punctuation">,</span> <span class="token comment">// uPort address of user, likely a MNID</span>\n  exp<span class="token punctuation">:</span> <span class="token operator">&lt;</span>future timestamp<span class="token operator">></span><span class="token punctuation">,</span>\n  claim<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'John Smith\'</span> <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> credential <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p><a name="Credentials+lookup"></a></p>\n<h3 id="credentialslookupaddress-⇒-codepromiseobject-errorcode"><a href="#credentialslookupaddress-%E2%87%92-codepromiseobject-errorcode" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>credentials.lookup(address) ⇒ <code>Promise.&#x3C;Object, Error></code></h3>\n<p>Look up a profile in the registry for a given uPort address. Address must be MNID encoded.</p>\n<p><strong>Kind</strong>: instance method of <a href="#Credentials"><code>Credentials</code></a>\n<strong>Returns</strong>: <code>Promise.&#x3C;Object, Error></code> - a promise which resolves with parsed profile or rejects with an error</p>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>address</td>\n<td><code>\nString\n</code></td>\n<td>a MNID encoded address</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">credentials<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">\'5A8bRWU3F7j3REx3vkJ...\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>profile <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> profile<span class="token punctuation">.</span>name\n    <span class="token keyword">const</span> pubkey <span class="token operator">=</span> profile<span class="token punctuation">.</span>pubkey\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>',timeToRead:5,excerpt:"Credentials The Credentials class allows you to easily create the signed payloads used in uPort inlcuding\n   credentials and signed mobile…",headings:[{value:"Credentials",depth:2},{value:"new Credentials(",depth:3},{value:"credentials.createRequest(",depth:3},{value:"credentials.receive(token, ",depth:3},{value:"credentials.push(token) ⇒ ",depth:3},{value:"credentials.attest(",depth:3},{value:"credentials.lookup(address) ⇒ ",depth:3}],frontmatter:{title:"Uport JS",category:"reference",type:"content"},fields:{slug:"/uport-js-docs"}},postByCategory:{totalCount:12,edges:[{node:{fields:{slug:"/attestcredentials"},headings:[{value:"Attesting Credentials",depth:1},{value:"Calling the attest method",depth:2},{value:"Setting an expiration date",depth:2},{value:"Attesting multiple credentials",depth:2}],excerpt:"Attesting Credentials One of the core needs of Web 3.0 is to build trust in a self-sovereign world. We establish facts which are not…",timeToRead:1,
frontmatter:{title:"Attesting Credentials",category:"guides",index:1,type:"content"}}},{node:{fields:{slug:"/gettingstarted"},headings:[{value:"Getting Started",depth:1},{value:"Download the Mobile App",depth:2},{value:"Register your App",depth:2},{value:"Install the Library/SDK",depth:2},{value:"Add your Keys",depth:2}],excerpt:"Getting Started Welcome to the uPort usage guide! Here we will walk you through all the necessary steps to get up and running with your…",timeToRead:3,frontmatter:{title:"Getting Started",category:"guides",index:0,type:"content"}}},{node:{fields:{slug:"/readme"},headings:[{value:"uPort Specs",depth:1},{value:"Identities",depth:2},{value:"Identities created using the uPort Mobile App",depth:3},{value:"Request Flows",depth:2},{value:"More about request flows",depth:3},{value:"Request and Response Transports",depth:2},{value:"Request/Response Transports",depth:3},{value:"Off-chain Messages",depth:2},{value:"More about Off-chain Messages",depth:3},{value:"On-chain Transactions",depth:2},{value:"More about Signing Ethereum transactions",depth:3},{value:"uPort PKI",depth:2},{value:"More about the uPort PKI",depth:3}],excerpt:"uPort Specs uPort is a platform for user centric identity and communication. The platform currently consists of our mobile app, Ethereum…",timeToRead:2,frontmatter:{title:"Uport Specs",category:"reference",index:0,type:"content"}}},{node:{fields:{slug:"/requestcredentials"},headings:[{value:"Requesting Credentials",depth:1},{value:"Calling the request method",depth:2},{value:"Requesting specific credentials",depth:2},{value:"Enabling Push Notifications",depth:2},{value:"Custom QR Styling (web)",depth:2},{value:"Logging in via Mobile (sdk)",depth:2}],excerpt:"Requesting Credentials   The first and most basic step you should take is to allow your user to connect their uPort to your app. The…",timeToRead:3,frontmatter:{title:"Requesting Credentials",category:"guides",index:1,type:"content"}}},{node:{fields:{slug:"/signtransactions"},headings:[{value:"Signing Transactions",depth:1},{value:"Supply the contract ABI",depth:2},{value:"Create the contract object",depth:2},{value:"Call a basic method on the contract",depth:2},{value:"Call a tx signing method on the contract",depth:2},{value:"Wait for mining to complete",depth:2}],excerpt:"Signing Transactions uPort comes pre-baked with a web3 instance that calls to  Infura , our p2p swarm of nodes we have built so you don't…",timeToRead:3,frontmatter:{title:"Signing Transactions",category:"guides",index:3,type:"content"}}},{node:{fields:{slug:"/clients"},headings:[{value:"Clients (apps)",depth:1},{value:"uPort Mobile Wallet",depth:2},{value:"uPort App Manager",depth:2},{value:"uPort JS Client",depth:2}],excerpt:"Clients (apps) Allow users, developers, and applications to interact with the uPort platform. uPort Mobile Wallet : Secure mobile self…",timeToRead:1,frontmatter:{title:"Clients (apps)",category:"guides",index:3,type:"content"}}},{node:{fields:{slug:"/overview"},headings:[{value:"OVERVIEW",depth:1}],excerpt:"OVERVIEW uPort is an interoperable identity network for a secure, private, decentralized web. uPort provides open protocols for…",timeToRead:1,frontmatter:{title:"Overview",category:"overview",index:0,type:"content"}}},{node:{fields:{slug:"/platform"},headings:[{value:"PLATFORM",depth:1},{value:"Ethereum Identity Components",depth:2},{value:"Network Microservices",depth:2},{value:"Libraries",depth:2}],excerpt:"PLATFORM The uPort Platform is our implementation of the uPort Protocol designed to make decentralized identities on Ethereum easy to create…",timeToRead:3,frontmatter:{title:"Platform",category:"overview",index:2,type:"content"}}},{node:{fields:{slug:"/protocol"},headings:[{value:"PROTOCOLS",depth:1},{value:"uPort Identity Protocol",depth:2},{value:"uPort Claims Protocol",depth:2}],excerpt:"PROTOCOLS uPort consists of identity and messaging protocols that together form an interoperable identity layer for the decentralized web…",timeToRead:1,frontmatter:{title:"Protocols",category:"overview",index:3,type:"content"}}},{node:{fields:{slug:"/specs"},headings:[{value:"SPECS",depth:1},{value:"Flows",depth:2},{value:"Messages",depth:2},{value:"PKI",depth:2},{value:"Rest APIs",depth:2},{value:"Transports",depth:2}],excerpt:"SPECS   uPort Platform Specifications :  uPort's platform specification repository. Flows   uPort Request Flows : Selective Disclosure Flow…",timeToRead:2,frontmatter:{title:"Specs",category:"overview",index:3,type:"content"}}},{node:{fields:{slug:"/uport-connect-docs"},headings:[{value:"Classes",depth:2},{value:"Connect ⇐ ",depth:2},{value:"new Connect(appName, ",depth:3},{value:"connect.getWeb3() ⇒ ",depth:3},{value:"connect.getProvider() ⇒ ",depth:3},{value:"connect.requestCredentials(",depth:3},{value:"connect.requestAddress(",depth:3},{value:"connect.attestCredentials(credential, ",depth:3},{value:"connect.request(request) ⇒ ",depth:3},{value:"connect.contract(abi) ⇒ ",depth:3},{value:"connect.sendTransaction(txobj) ⇒ ",depth:3},{value:"connect.addAppParameters(txobj, callbackUrl) ⇒ ",depth:3},{value:"ConnectCore",depth:2},{value:"new ConnectCore(appName, ",depth:3},{value:"connectCore.getProvider() ⇒ ",depth:3},{value:"connectCore.requestCredentials(",depth:3},{value:"connectCore.requestAddress(",depth:3},{value:"connectCore.attestCredentials(credential, ",depth:3},{value:"connectCore.request(request) ⇒ ",depth:3},{value:"connectCore.contract(abi) ⇒ ",depth:3},{value:"connectCore.sendTransaction(txobj) ⇒ ",depth:3},{value:"connectCore.addAppParameters(txobj, callbackUrl) ⇒ ",depth:3}],excerpt:"Classes Connect ⇐  ConnectCore Primary object for frontend interactions with uPort. Bundles all neccesary functionality. Kind : global class…",timeToRead:19,frontmatter:{title:"Uport Connect",category:"reference",index:1,type:"content"}}},{node:{fields:{slug:"/uport-js-docs"},headings:[{value:"Credentials",depth:2},{value:"new Credentials(",depth:3},{value:"credentials.createRequest(",depth:3},{value:"credentials.receive(token, ",depth:3},{value:"credentials.push(token) ⇒ ",depth:3},{value:"credentials.attest(",depth:3},{value:"credentials.lookup(address) ⇒ ",depth:3}],excerpt:"Credentials The Credentials class allows you to easily create the signed payloads used in uPort inlcuding\n   credentials and signed mobile…",timeToRead:5,frontmatter:{title:"Uport JS",category:"reference",index:2,type:"content"}}}]}},pathContext:{slug:"/uport-js-docs"}}}});
//# sourceMappingURL=path---uport-js-docs-c74fbe6c6e5a140d4648.js.map